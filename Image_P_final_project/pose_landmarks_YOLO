from ultralytics import YOLO
import numpy as np
import mediapipe as mp
import joblib 
import cv2
import xgboost as xgb

yolo = YOLO('yolov8n.pt')

xgb_model = joblib.load('/home/soheil/Downloads/fall_detection_model.pkl')

mp_pose = mp.solutions.pose
pose = mp_pose.Pose(static_image_mode=False) # initialize the pose estimation model
mp_drawing = mp.solutions.drawing_utils # draw the pose landmarksb

# def to extract pose landmarks
def extract_pose_landmarks(image):
    rgb_img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = pose.process(rgb_img)
    if not results.pose_landmarks:
        return None
    
    landmarks = results.pose_landmarks.landmark
    features = []
    for lm in landmarks:
        features.extend([lm.x, lm.y, lm.z, lm.visibility])
    #return np.array(feat).reshape(1,-1), results.pose_landmarks
    return features
    
webcam = cv2.VideoCapture(0)
webcam.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
webcam.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)

while webcam.isOpened():
    ret, frame = webcam.read()
    if not ret:
        break

    results = yolo.predict(frame, classes = [0], conf = 0.4, verbose = False)
    detections = results[0].boxes.xyxy.cpu().numpy()   # extract bounding box coordinates (x1, y1, x2, y2)

    for det in detections:
        x1, y1, x2, y2 = map(int, det) # converts coordinates to integers
        person_img = frame[y1:y2, x1:x2] # extract region of interest of person image
        features = extract_pose_landmarks(person_img) # call the function to extract pose landmark from person ROI

        # if pose landmarks were extracted successfuly  --> predict fall staus using pretrained xgboost model
        if features:
            prediction = xgb_model.predict([features])
            label = "Fall" if prediction == "fall" or prediction == 1 else "Normal"
            Color = (0, 255, 0) if label == "Normal" else (0, 0, 255)
        else:
            label = "No Pose"
            Color = (255, 0, 0)

        cv2.rectangle(frame, (x1,y1), (x2, y2), Color, 2) # draw a bounding box around the person
        cv2.putText(frame, label, (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, Color, 2)
    
    cv2.imshow("Multi-Person Fall Detection", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

webcam.release()
cv2.destroyAllWindows()


